// Code generated by pigeon; DO NOT EDIT.

package ast

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "QUERY",
			pos:  position{line: 17, col: 1, offset: 118},
			expr: &actionExpr{
				pos: position{line: 17, col: 10, offset: 127},
				run: (*parser).callonQUERY1,
				expr: &seqExpr{
					pos: position{line: 17, col: 10, offset: 127},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 17, col: 10, offset: 127},
							expr: &choiceExpr{
								pos: position{line: 17, col: 11, offset: 128},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 17, col: 11, offset: 128},
										name: "NL",
									},
									&ruleRefExpr{
										pos:  position{line: 17, col: 16, offset: 133},
										name: "SPACE",
									},
									&ruleRefExpr{
										pos:  position{line: 17, col: 24, offset: 141},
										name: "COMMENT",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 34, offset: 151},
							label: "us",
							expr: &zeroOrMoreExpr{
								pos: position{line: 17, col: 37, offset: 154},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 38, offset: 155},
									name: "USE",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 44, offset: 161},
							name: "WS",
						},
						&zeroOrMoreExpr{
							pos: position{line: 17, col: 47, offset: 164},
							expr: &choiceExpr{
								pos: position{line: 17, col: 48, offset: 165},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 17, col: 48, offset: 165},
										name: "NL",
									},
									&ruleRefExpr{
										pos:  position{line: 17, col: 53, offset: 170},
										name: "COMMENT",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 63, offset: 180},
							name: "WS",
						},
						&labeledExpr{
							pos:   position{line: 17, col: 66, offset: 183},
							label: "firstBlock",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 77, offset: 194},
								name: "BLOCK",
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 83, offset: 200},
							label: "otherBlocks",
							expr: &zeroOrMoreExpr{
								pos: position{line: 17, col: 95, offset: 212},
								expr: &seqExpr{
									pos: position{line: 17, col: 96, offset: 213},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 17, col: 96, offset: 213},
											name: "BS",
										},
										&ruleRefExpr{
											pos:  position{line: 17, col: 99, offset: 216},
											name: "BLOCK",
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 17, col: 107, offset: 224},
							expr: &choiceExpr{
								pos: position{line: 17, col: 108, offset: 225},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 17, col: 108, offset: 225},
										name: "NL",
									},
									&ruleRefExpr{
										pos:  position{line: 17, col: 113, offset: 230},
										name: "SPACE",
									},
									&ruleRefExpr{
										pos:  position{line: 17, col: 121, offset: 238},
										name: "COMMENT",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 131, offset: 248},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "USE",
			pos:  position{line: 21, col: 1, offset: 303},
			expr: &actionExpr{
				pos: position{line: 21, col: 8, offset: 310},
				run: (*parser).callonUSE1,
				expr: &seqExpr{
					pos: position{line: 21, col: 8, offset: 310},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 21, col: 8, offset: 310},
							val:        "use",
							ignoreCase: false,
							want:       "\"use\"",
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 14, offset: 316},
							name: "WS_MAND",
						},
						&labeledExpr{
							pos:   position{line: 21, col: 22, offset: 324},
							label: "r",
							expr: &ruleRefExpr{
								pos:  position{line: 21, col: 25, offset: 327},
								name: "USE_ACTION",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 37, offset: 339},
							name: "WS",
						},
						&labeledExpr{
							pos:   position{line: 21, col: 40, offset: 342},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 21, col: 43, offset: 345},
								name: "USE_VALUE",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 54, offset: 356},
							name: "WS",
						},
						&zeroOrMoreExpr{
							pos: position{line: 21, col: 57, offset: 359},
							expr: &ruleRefExpr{
								pos:  position{line: 21, col: 57, offset: 359},
								name: "LS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 61, offset: 363},
							name: "WS",
						},
					},
				},
			},
		},
		{
			name: "USE_ACTION",
			pos:  position{line: 25, col: 1, offset: 392},
			expr: &actionExpr{
				pos: position{line: 25, col: 15, offset: 406},
				run: (*parser).callonUSE_ACTION1,
				expr: &choiceExpr{
					pos: position{line: 25, col: 16, offset: 407},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 25, col: 16, offset: 407},
							val:        "timeout",
							ignoreCase: false,
							want:       "\"timeout\"",
						},
						&litMatcher{
							pos:        position{line: 25, col: 28, offset: 419},
							val:        "max-age",
							ignoreCase: false,
							want:       "\"max-age\"",
						},
						&litMatcher{
							pos:        position{line: 25, col: 40, offset: 431},
							val:        "s-max-age",
							ignoreCase: false,
							want:       "\"s-max-age\"",
						},
					},
				},
			},
		},
		{
			name: "USE_VALUE",
			pos:  position{line: 29, col: 1, offset: 475},
			expr: &actionExpr{
				pos: position{line: 29, col: 14, offset: 488},
				run: (*parser).callonUSE_VALUE1,
				expr: &labeledExpr{
					pos:   position{line: 29, col: 14, offset: 488},
					label: "v",
					expr: &choiceExpr{
						pos: position{line: 29, col: 17, offset: 491},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 29, col: 17, offset: 491},
								name: "String",
							},
							&ruleRefExpr{
								pos:  position{line: 29, col: 26, offset: 500},
								name: "Integer",
							},
						},
					},
				},
			},
		},
		{
			name: "BLOCK",
			pos:  position{line: 33, col: 1, offset: 537},
			expr: &actionExpr{
				pos: position{line: 33, col: 10, offset: 546},
				run: (*parser).callonBLOCK1,
				expr: &seqExpr{
					pos: position{line: 33, col: 10, offset: 546},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 33, col: 10, offset: 546},
							label: "action",
							expr: &ruleRefExpr{
								pos:  position{line: 33, col: 18, offset: 554},
								name: "ACTION_RULE",
							},
						},
						&labeledExpr{
							pos:   position{line: 33, col: 31, offset: 567},
							label: "m",
							expr: &zeroOrOneExpr{
								pos: position{line: 33, col: 34, offset: 570},
								expr: &ruleRefExpr{
									pos:  position{line: 33, col: 34, offset: 570},
									name: "MODIFIER_RULE",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 33, col: 50, offset: 586},
							label: "w",
							expr: &zeroOrOneExpr{
								pos: position{line: 33, col: 53, offset: 589},
								expr: &ruleRefExpr{
									pos:  position{line: 33, col: 53, offset: 589},
									name: "WITH_RULE",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 33, col: 65, offset: 601},
							label: "f",
							expr: &zeroOrOneExpr{
								pos: position{line: 33, col: 67, offset: 603},
								expr: &choiceExpr{
									pos: position{line: 33, col: 68, offset: 604},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 33, col: 68, offset: 604},
											name: "HIDDEN_RULE",
										},
										&ruleRefExpr{
											pos:  position{line: 33, col: 82, offset: 618},
											name: "ONLY_RULE",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 33, col: 94, offset: 630},
							label: "fl",
							expr: &zeroOrOneExpr{
								pos: position{line: 33, col: 98, offset: 634},
								expr: &ruleRefExpr{
									pos:  position{line: 33, col: 98, offset: 634},
									name: "FLAGS_RULE",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 33, col: 111, offset: 647},
							name: "WS",
						},
					},
				},
			},
		},
		{
			name: "ACTION_RULE",
			pos:  position{line: 37, col: 1, offset: 693},
			expr: &actionExpr{
				pos: position{line: 37, col: 16, offset: 708},
				run: (*parser).callonACTION_RULE1,
				expr: &seqExpr{
					pos: position{line: 37, col: 16, offset: 708},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 37, col: 16, offset: 708},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 37, col: 19, offset: 711},
								name: "METHOD",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 37, col: 27, offset: 719},
							name: "WS_MAND",
						},
						&labeledExpr{
							pos:   position{line: 37, col: 35, offset: 727},
							label: "r",
							expr: &ruleRefExpr{
								pos:  position{line: 37, col: 38, offset: 730},
								name: "IDENT",
							},
						},
						&labeledExpr{
							pos:   position{line: 37, col: 45, offset: 737},
							label: "a",
							expr: &zeroOrOneExpr{
								pos: position{line: 37, col: 48, offset: 740},
								expr: &ruleRefExpr{
									pos:  position{line: 37, col: 48, offset: 740},
									name: "ALIAS",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 37, col: 56, offset: 748},
							label: "i",
							expr: &zeroOrOneExpr{
								pos: position{line: 37, col: 59, offset: 751},
								expr: &ruleRefExpr{
									pos:  position{line: 37, col: 59, offset: 751},
									name: "IN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "METHOD",
			pos:  position{line: 41, col: 1, offset: 795},
			expr: &actionExpr{
				pos: position{line: 41, col: 11, offset: 805},
				run: (*parser).callonMETHOD1,
				expr: &choiceExpr{
					pos: position{line: 41, col: 12, offset: 806},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 41, col: 12, offset: 806},
							val:        "from",
							ignoreCase: false,
							want:       "\"from\"",
						},
						&litMatcher{
							pos:        position{line: 41, col: 21, offset: 815},
							val:        "to",
							ignoreCase: false,
							want:       "\"to\"",
						},
						&litMatcher{
							pos:        position{line: 41, col: 28, offset: 822},
							val:        "into",
							ignoreCase: false,
							want:       "\"into\"",
						},
						&litMatcher{
							pos:        position{line: 41, col: 36, offset: 830},
							val:        "update",
							ignoreCase: false,
							want:       "\"update\"",
						},
						&litMatcher{
							pos:        position{line: 41, col: 47, offset: 841},
							val:        "delete",
							ignoreCase: false,
							want:       "\"delete\"",
						},
					},
				},
			},
		},
		{
			name: "ALIAS",
			pos:  position{line: 45, col: 1, offset: 882},
			expr: &actionExpr{
				pos: position{line: 45, col: 10, offset: 891},
				run: (*parser).callonALIAS1,
				expr: &seqExpr{
					pos: position{line: 45, col: 10, offset: 891},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 45, col: 10, offset: 891},
							name: "WS_MAND",
						},
						&litMatcher{
							pos:        position{line: 45, col: 18, offset: 899},
							val:        "as",
							ignoreCase: false,
							want:       "\"as\"",
						},
						&ruleRefExpr{
							pos:  position{line: 45, col: 23, offset: 904},
							name: "WS_MAND",
						},
						&labeledExpr{
							pos:   position{line: 45, col: 31, offset: 912},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 45, col: 34, offset: 915},
								name: "IDENT",
							},
						},
					},
				},
			},
		},
		{
			name: "IN",
			pos:  position{line: 49, col: 1, offset: 942},
			expr: &actionExpr{
				pos: position{line: 49, col: 7, offset: 948},
				run: (*parser).callonIN1,
				expr: &seqExpr{
					pos: position{line: 49, col: 7, offset: 948},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 49, col: 7, offset: 948},
							name: "WS_MAND",
						},
						&litMatcher{
							pos:        position{line: 49, col: 15, offset: 956},
							val:        "in",
							ignoreCase: false,
							want:       "\"in\"",
						},
						&ruleRefExpr{
							pos:  position{line: 49, col: 20, offset: 961},
							name: "WS_MAND",
						},
						&labeledExpr{
							pos:   position{line: 49, col: 28, offset: 969},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 49, col: 31, offset: 972},
								name: "IDENT_WITH_DOT",
							},
						},
					},
				},
			},
		},
		{
			name: "MODIFIER_RULE",
			pos:  position{line: 53, col: 1, offset: 1010},
			expr: &actionExpr{
				pos: position{line: 53, col: 18, offset: 1027},
				run: (*parser).callonMODIFIER_RULE1,
				expr: &labeledExpr{
					pos:   position{line: 53, col: 18, offset: 1027},
					label: "m",
					expr: &oneOrMoreExpr{
						pos: position{line: 53, col: 20, offset: 1029},
						expr: &choiceExpr{
							pos: position{line: 53, col: 21, offset: 1030},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 53, col: 21, offset: 1030},
									name: "HEADERS",
								},
								&ruleRefExpr{
									pos:  position{line: 53, col: 31, offset: 1040},
									name: "TIMEOUT",
								},
								&ruleRefExpr{
									pos:  position{line: 53, col: 41, offset: 1050},
									name: "MAX_AGE",
								},
								&ruleRefExpr{
									pos:  position{line: 53, col: 51, offset: 1060},
									name: "S_MAX_AGE",
								},
								&ruleRefExpr{
									pos:  position{line: 53, col: 63, offset: 1072},
									name: "DEPENDS_ON",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "WITH_RULE",
			pos:  position{line: 57, col: 1, offset: 1105},
			expr: &actionExpr{
				pos: position{line: 57, col: 14, offset: 1118},
				run: (*parser).callonWITH_RULE1,
				expr: &seqExpr{
					pos: position{line: 57, col: 14, offset: 1118},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 57, col: 14, offset: 1118},
							name: "WS_MAND",
						},
						&litMatcher{
							pos:        position{line: 57, col: 22, offset: 1126},
							val:        "with",
							ignoreCase: false,
							want:       "\"with\"",
						},
						&ruleRefExpr{
							pos:  position{line: 57, col: 29, offset: 1133},
							name: "WS_MAND",
						},
						&labeledExpr{
							pos:   position{line: 57, col: 37, offset: 1141},
							label: "pb",
							expr: &zeroOrOneExpr{
								pos: position{line: 57, col: 40, offset: 1144},
								expr: &ruleRefExpr{
									pos:  position{line: 57, col: 40, offset: 1144},
									name: "PARAMETER_BODY",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 57, col: 56, offset: 1160},
							label: "kvs",
							expr: &zeroOrOneExpr{
								pos: position{line: 57, col: 60, offset: 1164},
								expr: &ruleRefExpr{
									pos:  position{line: 57, col: 60, offset: 1164},
									name: "KEY_VALUE_LIST",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PARAMETER_BODY",
			pos:  position{line: 61, col: 1, offset: 1210},
			expr: &actionExpr{
				pos: position{line: 61, col: 19, offset: 1228},
				run: (*parser).callonPARAMETER_BODY1,
				expr: &seqExpr{
					pos: position{line: 61, col: 19, offset: 1228},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 61, col: 19, offset: 1228},
							val:        "$",
							ignoreCase: false,
							want:       "\"$\"",
						},
						&labeledExpr{
							pos:   position{line: 61, col: 23, offset: 1232},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 61, col: 26, offset: 1235},
								name: "IDENT",
							},
						},
						&labeledExpr{
							pos:   position{line: 61, col: 33, offset: 1242},
							label: "fn",
							expr: &zeroOrMoreExpr{
								pos: position{line: 61, col: 36, offset: 1245},
								expr: &ruleRefExpr{
									pos:  position{line: 61, col: 37, offset: 1246},
									name: "APPLY_FN",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 61, col: 48, offset: 1257},
							name: "WS",
						},
						&zeroOrOneExpr{
							pos: position{line: 61, col: 51, offset: 1260},
							expr: &ruleRefExpr{
								pos:  position{line: 61, col: 51, offset: 1260},
								name: "LS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 61, col: 55, offset: 1264},
							name: "WS",
						},
					},
				},
			},
		},
		{
			name: "KEY_VALUE_LIST",
			pos:  position{line: 65, col: 1, offset: 1304},
			expr: &actionExpr{
				pos: position{line: 65, col: 19, offset: 1322},
				run: (*parser).callonKEY_VALUE_LIST1,
				expr: &seqExpr{
					pos: position{line: 65, col: 19, offset: 1322},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 65, col: 19, offset: 1322},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 65, col: 25, offset: 1328},
								name: "KEY_VALUE",
							},
						},
						&labeledExpr{
							pos:   position{line: 65, col: 35, offset: 1338},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 65, col: 42, offset: 1345},
								expr: &seqExpr{
									pos: position{line: 65, col: 43, offset: 1346},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 65, col: 43, offset: 1346},
											name: "WS",
										},
										&choiceExpr{
											pos: position{line: 65, col: 47, offset: 1350},
											alternatives: []interface{}{
												&seqExpr{
													pos: position{line: 65, col: 47, offset: 1350},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 65, col: 47, offset: 1350},
															name: "LS",
														},
														&zeroOrMoreExpr{
															pos: position{line: 65, col: 50, offset: 1353},
															expr: &seqExpr{
																pos: position{line: 65, col: 51, offset: 1354},
																exprs: []interface{}{
																	&ruleRefExpr{
																		pos:  position{line: 65, col: 51, offset: 1354},
																		name: "WS",
																	},
																	&ruleRefExpr{
																		pos:  position{line: 65, col: 54, offset: 1357},
																		name: "NL",
																	},
																	&ruleRefExpr{
																		pos:  position{line: 65, col: 57, offset: 1360},
																		name: "WS",
																	},
																},
															},
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 65, col: 64, offset: 1367},
													name: "LS",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 65, col: 68, offset: 1371},
											name: "WS",
										},
										&ruleRefExpr{
											pos:  position{line: 65, col: 71, offset: 1374},
											name: "KEY_VALUE",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KEY_VALUE",
			pos:  position{line: 69, col: 1, offset: 1430},
			expr: &actionExpr{
				pos: position{line: 69, col: 14, offset: 1443},
				run: (*parser).callonKEY_VALUE1,
				expr: &seqExpr{
					pos: position{line: 69, col: 14, offset: 1443},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 69, col: 14, offset: 1443},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 69, col: 17, offset: 1446},
								name: "IDENT_WITH_DOT",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 69, col: 33, offset: 1462},
							name: "WS",
						},
						&litMatcher{
							pos:        position{line: 69, col: 36, offset: 1465},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&ruleRefExpr{
							pos:  position{line: 69, col: 40, offset: 1469},
							name: "WS",
						},
						&labeledExpr{
							pos:   position{line: 69, col: 43, offset: 1472},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 69, col: 46, offset: 1475},
								name: "VALUE",
							},
						},
						&labeledExpr{
							pos:   position{line: 69, col: 53, offset: 1482},
							label: "fn",
							expr: &zeroOrMoreExpr{
								pos: position{line: 69, col: 56, offset: 1485},
								expr: &ruleRefExpr{
									pos:  position{line: 69, col: 57, offset: 1486},
									name: "APPLY_FN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "APPLY_FN",
			pos:  position{line: 73, col: 1, offset: 1532},
			expr: &actionExpr{
				pos: position{line: 73, col: 13, offset: 1544},
				run: (*parser).callonAPPLY_FN1,
				expr: &seqExpr{
					pos: position{line: 73, col: 13, offset: 1544},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 73, col: 13, offset: 1544},
							name: "WS",
						},
						&litMatcher{
							pos:        position{line: 73, col: 16, offset: 1547},
							val:        "->",
							ignoreCase: false,
							want:       "\"->\"",
						},
						&zeroOrOneExpr{
							pos: position{line: 73, col: 21, offset: 1552},
							expr: &ruleRefExpr{
								pos:  position{line: 73, col: 21, offset: 1552},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 73, col: 25, offset: 1556},
							label: "fn",
							expr: &ruleRefExpr{
								pos:  position{line: 73, col: 29, offset: 1560},
								name: "FUNCTION",
							},
						},
					},
				},
			},
		},
		{
			name: "FUNCTION",
			pos:  position{line: 77, col: 1, offset: 1591},
			expr: &actionExpr{
				pos: position{line: 77, col: 13, offset: 1603},
				run: (*parser).callonFUNCTION1,
				expr: &choiceExpr{
					pos: position{line: 77, col: 14, offset: 1604},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 77, col: 14, offset: 1604},
							val:        "no-multiplex",
							ignoreCase: false,
							want:       "\"no-multiplex\"",
						},
						&litMatcher{
							pos:        position{line: 77, col: 31, offset: 1621},
							val:        "no-explode",
							ignoreCase: false,
							want:       "\"no-explode\"",
						},
						&litMatcher{
							pos:        position{line: 77, col: 46, offset: 1636},
							val:        "base64",
							ignoreCase: false,
							want:       "\"base64\"",
						},
						&litMatcher{
							pos:        position{line: 77, col: 57, offset: 1647},
							val:        "json",
							ignoreCase: false,
							want:       "\"json\"",
						},
						&litMatcher{
							pos:        position{line: 77, col: 65, offset: 1655},
							val:        "as-body",
							ignoreCase: false,
							want:       "\"as-body\"",
						},
						&litMatcher{
							pos:        position{line: 77, col: 77, offset: 1667},
							val:        "as-query",
							ignoreCase: false,
							want:       "\"as-query\"",
						},
						&litMatcher{
							pos:        position{line: 77, col: 90, offset: 1680},
							val:        "flatten",
							ignoreCase: false,
							want:       "\"flatten\"",
						},
					},
				},
			},
		},
		{
			name: "VALUE",
			pos:  position{line: 81, col: 1, offset: 1722},
			expr: &actionExpr{
				pos: position{line: 81, col: 10, offset: 1731},
				run: (*parser).callonVALUE1,
				expr: &labeledExpr{
					pos:   position{line: 81, col: 10, offset: 1731},
					label: "v",
					expr: &choiceExpr{
						pos: position{line: 81, col: 13, offset: 1734},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 81, col: 13, offset: 1734},
								name: "LIST",
							},
							&ruleRefExpr{
								pos:  position{line: 81, col: 20, offset: 1741},
								name: "OBJECT",
							},
							&ruleRefExpr{
								pos:  position{line: 81, col: 29, offset: 1750},
								name: "VARIABLE",
							},
							&ruleRefExpr{
								pos:  position{line: 81, col: 40, offset: 1761},
								name: "PRIMITIVE",
							},
						},
					},
				},
			},
		},
		{
			name: "LIST",
			pos:  position{line: 85, col: 1, offset: 1797},
			expr: &actionExpr{
				pos: position{line: 85, col: 9, offset: 1805},
				run: (*parser).callonLIST1,
				expr: &labeledExpr{
					pos:   position{line: 85, col: 9, offset: 1805},
					label: "l",
					expr: &choiceExpr{
						pos: position{line: 85, col: 12, offset: 1808},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 85, col: 12, offset: 1808},
								name: "EMPTY_LIST",
							},
							&ruleRefExpr{
								pos:  position{line: 85, col: 25, offset: 1821},
								name: "POPULATED_LIST",
							},
						},
					},
				},
			},
		},
		{
			name: "EMPTY_LIST",
			pos:  position{line: 89, col: 1, offset: 1857},
			expr: &actionExpr{
				pos: position{line: 89, col: 15, offset: 1871},
				run: (*parser).callonEMPTY_LIST1,
				expr: &seqExpr{
					pos: position{line: 89, col: 15, offset: 1871},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 89, col: 15, offset: 1871},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&ruleRefExpr{
							pos:  position{line: 89, col: 19, offset: 1875},
							name: "WS",
						},
						&litMatcher{
							pos:        position{line: 89, col: 22, offset: 1878},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "POPULATED_LIST",
			pos:  position{line: 93, col: 1, offset: 1910},
			expr: &actionExpr{
				pos: position{line: 93, col: 19, offset: 1928},
				run: (*parser).callonPOPULATED_LIST1,
				expr: &seqExpr{
					pos: position{line: 93, col: 19, offset: 1928},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 93, col: 19, offset: 1928},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&ruleRefExpr{
							pos:  position{line: 93, col: 23, offset: 1932},
							name: "WS",
						},
						&labeledExpr{
							pos:   position{line: 93, col: 26, offset: 1935},
							label: "i",
							expr: &ruleRefExpr{
								pos:  position{line: 93, col: 28, offset: 1937},
								name: "VALUE",
							},
						},
						&labeledExpr{
							pos:   position{line: 93, col: 34, offset: 1943},
							label: "ii",
							expr: &zeroOrMoreExpr{
								pos: position{line: 93, col: 37, offset: 1946},
								expr: &seqExpr{
									pos: position{line: 93, col: 38, offset: 1947},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 93, col: 38, offset: 1947},
											name: "WS",
										},
										&zeroOrMoreExpr{
											pos: position{line: 93, col: 41, offset: 1950},
											expr: &ruleRefExpr{
												pos:  position{line: 93, col: 41, offset: 1950},
												name: "LS",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 93, col: 45, offset: 1954},
											name: "WS",
										},
										&ruleRefExpr{
											pos:  position{line: 93, col: 48, offset: 1957},
											name: "VALUE",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 93, col: 56, offset: 1965},
							name: "WS",
						},
						&litMatcher{
							pos:        position{line: 93, col: 59, offset: 1968},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "OBJECT",
			pos:  position{line: 97, col: 1, offset: 2000},
			expr: &actionExpr{
				pos: position{line: 97, col: 11, offset: 2010},
				run: (*parser).callonOBJECT1,
				expr: &labeledExpr{
					pos:   position{line: 97, col: 11, offset: 2010},
					label: "o",
					expr: &choiceExpr{
						pos: position{line: 97, col: 14, offset: 2013},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 97, col: 14, offset: 2013},
								name: "EMPTY_OBJ",
							},
							&ruleRefExpr{
								pos:  position{line: 97, col: 26, offset: 2025},
								name: "POPULATED_OBJ",
							},
						},
					},
				},
			},
		},
		{
			name: "EMPTY_OBJ",
			pos:  position{line: 101, col: 1, offset: 2060},
			expr: &actionExpr{
				pos: position{line: 101, col: 14, offset: 2073},
				run: (*parser).callonEMPTY_OBJ1,
				expr: &seqExpr{
					pos: position{line: 101, col: 14, offset: 2073},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 101, col: 14, offset: 2073},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&ruleRefExpr{
							pos:  position{line: 101, col: 18, offset: 2077},
							name: "WS",
						},
						&zeroOrMoreExpr{
							pos: position{line: 101, col: 21, offset: 2080},
							expr: &ruleRefExpr{
								pos:  position{line: 101, col: 21, offset: 2080},
								name: "NL",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 101, col: 25, offset: 2084},
							name: "WS",
						},
						&litMatcher{
							pos:        position{line: 101, col: 28, offset: 2087},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "POPULATED_OBJ",
			pos:  position{line: 105, col: 1, offset: 2121},
			expr: &actionExpr{
				pos: position{line: 105, col: 18, offset: 2138},
				run: (*parser).callonPOPULATED_OBJ1,
				expr: &seqExpr{
					pos: position{line: 105, col: 18, offset: 2138},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 105, col: 18, offset: 2138},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&ruleRefExpr{
							pos:  position{line: 105, col: 22, offset: 2142},
							name: "WS",
						},
						&zeroOrMoreExpr{
							pos: position{line: 105, col: 25, offset: 2145},
							expr: &ruleRefExpr{
								pos:  position{line: 105, col: 25, offset: 2145},
								name: "NL",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 105, col: 29, offset: 2149},
							name: "WS",
						},
						&labeledExpr{
							pos:   position{line: 105, col: 32, offset: 2152},
							label: "oe",
							expr: &ruleRefExpr{
								pos:  position{line: 105, col: 36, offset: 2156},
								name: "OBJ_ENTRY",
							},
						},
						&labeledExpr{
							pos:   position{line: 105, col: 47, offset: 2167},
							label: "oes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 105, col: 51, offset: 2171},
								expr: &seqExpr{
									pos: position{line: 105, col: 52, offset: 2172},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 105, col: 52, offset: 2172},
											name: "WS",
										},
										&litMatcher{
											pos:        position{line: 105, col: 55, offset: 2175},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&ruleRefExpr{
											pos:  position{line: 105, col: 59, offset: 2179},
											name: "WS",
										},
										&zeroOrMoreExpr{
											pos: position{line: 105, col: 62, offset: 2182},
											expr: &ruleRefExpr{
												pos:  position{line: 105, col: 62, offset: 2182},
												name: "NL",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 105, col: 66, offset: 2186},
											name: "WS",
										},
										&ruleRefExpr{
											pos:  position{line: 105, col: 69, offset: 2189},
											name: "OBJ_ENTRY",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 105, col: 81, offset: 2201},
							name: "WS",
						},
						&zeroOrMoreExpr{
							pos: position{line: 105, col: 84, offset: 2204},
							expr: &ruleRefExpr{
								pos:  position{line: 105, col: 84, offset: 2204},
								name: "NL",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 105, col: 88, offset: 2208},
							name: "WS",
						},
						&litMatcher{
							pos:        position{line: 105, col: 91, offset: 2211},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "OBJ_ENTRY",
			pos:  position{line: 109, col: 1, offset: 2256},
			expr: &actionExpr{
				pos: position{line: 109, col: 14, offset: 2269},
				run: (*parser).callonOBJ_ENTRY1,
				expr: &seqExpr{
					pos: position{line: 109, col: 14, offset: 2269},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 109, col: 14, offset: 2269},
							label: "k",
							expr: &choiceExpr{
								pos: position{line: 109, col: 17, offset: 2272},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 109, col: 17, offset: 2272},
										name: "String",
									},
									&ruleRefExpr{
										pos:  position{line: 109, col: 26, offset: 2281},
										name: "IDENT_WITHOUT_COLLON",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 109, col: 48, offset: 2303},
							name: "WS",
						},
						&litMatcher{
							pos:        position{line: 109, col: 51, offset: 2306},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&ruleRefExpr{
							pos:  position{line: 109, col: 55, offset: 2310},
							name: "WS",
						},
						&labeledExpr{
							pos:   position{line: 109, col: 58, offset: 2313},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 109, col: 61, offset: 2316},
								name: "VALUE",
							},
						},
					},
				},
			},
		},
		{
			name: "PRIMITIVE",
			pos:  position{line: 113, col: 1, offset: 2357},
			expr: &actionExpr{
				pos: position{line: 113, col: 14, offset: 2370},
				run: (*parser).callonPRIMITIVE1,
				expr: &labeledExpr{
					pos:   position{line: 113, col: 14, offset: 2370},
					label: "p",
					expr: &choiceExpr{
						pos: position{line: 113, col: 17, offset: 2373},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 113, col: 17, offset: 2373},
								name: "Null",
							},
							&ruleRefExpr{
								pos:  position{line: 113, col: 24, offset: 2380},
								name: "Boolean",
							},
							&ruleRefExpr{
								pos:  position{line: 113, col: 34, offset: 2390},
								name: "String",
							},
							&ruleRefExpr{
								pos:  position{line: 113, col: 43, offset: 2399},
								name: "Float",
							},
							&ruleRefExpr{
								pos:  position{line: 113, col: 51, offset: 2407},
								name: "Integer",
							},
							&ruleRefExpr{
								pos:  position{line: 113, col: 61, offset: 2417},
								name: "CHAIN",
							},
						},
					},
				},
			},
		},
		{
			name: "ONLY_RULE",
			pos:  position{line: 119, col: 1, offset: 2455},
			expr: &actionExpr{
				pos: position{line: 119, col: 14, offset: 2468},
				run: (*parser).callonONLY_RULE1,
				expr: &seqExpr{
					pos: position{line: 119, col: 14, offset: 2468},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 119, col: 14, offset: 2468},
							name: "WS_MAND",
						},
						&litMatcher{
							pos:        position{line: 119, col: 22, offset: 2476},
							val:        "only",
							ignoreCase: false,
							want:       "\"only\"",
						},
						&ruleRefExpr{
							pos:  position{line: 119, col: 29, offset: 2483},
							name: "WS_MAND",
						},
						&labeledExpr{
							pos:   position{line: 119, col: 37, offset: 2491},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 119, col: 40, offset: 2494},
								name: "FILTER",
							},
						},
						&labeledExpr{
							pos:   position{line: 119, col: 48, offset: 2502},
							label: "fs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 119, col: 51, offset: 2505},
								expr: &seqExpr{
									pos: position{line: 119, col: 52, offset: 2506},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 119, col: 52, offset: 2506},
											name: "WS",
										},
										&notExpr{
											pos: position{line: 119, col: 55, offset: 2509},
											expr: &choiceExpr{
												pos: position{line: 119, col: 57, offset: 2511},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 119, col: 57, offset: 2511},
														name: "FLAGS_RULE",
													},
													&seqExpr{
														pos: position{line: 119, col: 70, offset: 2524},
														exprs: []interface{}{
															&ruleRefExpr{
																pos:  position{line: 119, col: 70, offset: 2524},
																name: "BS",
															},
															&ruleRefExpr{
																pos:  position{line: 119, col: 73, offset: 2527},
																name: "BLOCK",
															},
														},
													},
												},
											},
										},
										&choiceExpr{
											pos: position{line: 119, col: 81, offset: 2535},
											alternatives: []interface{}{
												&seqExpr{
													pos: position{line: 119, col: 81, offset: 2535},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 119, col: 81, offset: 2535},
															name: "LS",
														},
														&zeroOrMoreExpr{
															pos: position{line: 119, col: 84, offset: 2538},
															expr: &seqExpr{
																pos: position{line: 119, col: 85, offset: 2539},
																exprs: []interface{}{
																	&ruleRefExpr{
																		pos:  position{line: 119, col: 85, offset: 2539},
																		name: "WS",
																	},
																	&ruleRefExpr{
																		pos:  position{line: 119, col: 88, offset: 2542},
																		name: "NL",
																	},
																	&ruleRefExpr{
																		pos:  position{line: 119, col: 91, offset: 2545},
																		name: "WS",
																	},
																},
															},
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 119, col: 98, offset: 2552},
													name: "LS",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 119, col: 102, offset: 2556},
											name: "WS",
										},
										&ruleRefExpr{
											pos:  position{line: 119, col: 105, offset: 2559},
											name: "FILTER",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILTER",
			pos:  position{line: 123, col: 1, offset: 2596},
			expr: &actionExpr{
				pos: position{line: 123, col: 11, offset: 2606},
				run: (*parser).callonFILTER1,
				expr: &seqExpr{
					pos: position{line: 123, col: 11, offset: 2606},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 123, col: 11, offset: 2606},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 123, col: 14, offset: 2609},
								name: "FILTER_VALUE",
							},
						},
						&labeledExpr{
							pos:   position{line: 123, col: 28, offset: 2623},
							label: "fns",
							expr: &zeroOrMoreExpr{
								pos: position{line: 123, col: 32, offset: 2627},
								expr: &ruleRefExpr{
									pos:  position{line: 123, col: 33, offset: 2628},
									name: "APPLY_FILTER_FN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILTER_VALUE",
			pos:  position{line: 127, col: 1, offset: 2677},
			expr: &actionExpr{
				pos: position{line: 127, col: 17, offset: 2693},
				run: (*parser).callonFILTER_VALUE1,
				expr: &labeledExpr{
					pos:   position{line: 127, col: 17, offset: 2693},
					label: "fv",
					expr: &choiceExpr{
						pos: position{line: 127, col: 21, offset: 2697},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 127, col: 21, offset: 2697},
								name: "IDENT_WITH_DOT",
							},
							&litMatcher{
								pos:        position{line: 127, col: 38, offset: 2714},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
						},
					},
				},
			},
		},
		{
			name: "APPLY_FILTER_FN",
			pos:  position{line: 131, col: 1, offset: 2751},
			expr: &actionExpr{
				pos: position{line: 131, col: 20, offset: 2770},
				run: (*parser).callonAPPLY_FILTER_FN1,
				expr: &seqExpr{
					pos: position{line: 131, col: 20, offset: 2770},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 131, col: 20, offset: 2770},
							name: "WS",
						},
						&litMatcher{
							pos:        position{line: 131, col: 23, offset: 2773},
							val:        "->",
							ignoreCase: false,
							want:       "\"->\"",
						},
						&zeroOrOneExpr{
							pos: position{line: 131, col: 28, offset: 2778},
							expr: &ruleRefExpr{
								pos:  position{line: 131, col: 28, offset: 2778},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 131, col: 32, offset: 2782},
							label: "fn",
							expr: &ruleRefExpr{
								pos:  position{line: 131, col: 36, offset: 2786},
								name: "FILTER_FUNCTION",
							},
						},
					},
				},
			},
		},
		{
			name: "FILTER_FUNCTION",
			pos:  position{line: 135, col: 1, offset: 2824},
			expr: &actionExpr{
				pos: position{line: 135, col: 20, offset: 2843},
				run: (*parser).callonFILTER_FUNCTION1,
				expr: &labeledExpr{
					pos:   position{line: 135, col: 20, offset: 2843},
					label: "f",
					expr: &choiceExpr{
						pos: position{line: 135, col: 23, offset: 2846},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 135, col: 23, offset: 2846},
								name: "MATCHES",
							},
							&ruleRefExpr{
								pos:  position{line: 135, col: 33, offset: 2856},
								name: "FILTER_BY_REGEX",
							},
						},
					},
				},
			},
		},
		{
			name: "MATCHES",
			pos:  position{line: 139, col: 1, offset: 2893},
			expr: &actionExpr{
				pos: position{line: 139, col: 12, offset: 2904},
				run: (*parser).callonMATCHES1,
				expr: &seqExpr{
					pos: position{line: 139, col: 12, offset: 2904},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 139, col: 12, offset: 2904},
							val:        "matches",
							ignoreCase: false,
							want:       "\"matches\"",
						},
						&litMatcher{
							pos:        position{line: 139, col: 22, offset: 2914},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&labeledExpr{
							pos:   position{line: 139, col: 26, offset: 2918},
							label: "arg",
							expr: &choiceExpr{
								pos: position{line: 139, col: 31, offset: 2923},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 139, col: 31, offset: 2923},
										name: "VARIABLE",
									},
									&ruleRefExpr{
										pos:  position{line: 139, col: 42, offset: 2934},
										name: "String",
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 139, col: 50, offset: 2942},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "FILTER_BY_REGEX",
			pos:  position{line: 143, col: 1, offset: 2979},
			expr: &actionExpr{
				pos: position{line: 143, col: 20, offset: 2998},
				run: (*parser).callonFILTER_BY_REGEX1,
				expr: &seqExpr{
					pos: position{line: 143, col: 20, offset: 2998},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 143, col: 20, offset: 2998},
							val:        "filterByRegex",
							ignoreCase: false,
							want:       "\"filterByRegex\"",
						},
						&litMatcher{
							pos:        position{line: 143, col: 36, offset: 3014},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&zeroOrOneExpr{
							pos: position{line: 143, col: 40, offset: 3018},
							expr: &ruleRefExpr{
								pos:  position{line: 143, col: 40, offset: 3018},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 143, col: 44, offset: 3022},
							label: "path",
							expr: &choiceExpr{
								pos: position{line: 143, col: 50, offset: 3028},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 143, col: 50, offset: 3028},
										name: "VARIABLE",
									},
									&ruleRefExpr{
										pos:  position{line: 143, col: 61, offset: 3039},
										name: "String",
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 143, col: 69, offset: 3047},
							expr: &ruleRefExpr{
								pos:  position{line: 143, col: 69, offset: 3047},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 143, col: 73, offset: 3051},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrOneExpr{
							pos: position{line: 143, col: 77, offset: 3055},
							expr: &ruleRefExpr{
								pos:  position{line: 143, col: 77, offset: 3055},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 143, col: 81, offset: 3059},
							label: "regex",
							expr: &choiceExpr{
								pos: position{line: 143, col: 88, offset: 3066},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 143, col: 88, offset: 3066},
										name: "VARIABLE",
									},
									&ruleRefExpr{
										pos:  position{line: 143, col: 99, offset: 3077},
										name: "String",
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 143, col: 107, offset: 3085},
							expr: &ruleRefExpr{
								pos:  position{line: 143, col: 107, offset: 3085},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 143, col: 112, offset: 3090},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "HEADERS",
			pos:  position{line: 147, col: 1, offset: 3137},
			expr: &actionExpr{
				pos: position{line: 147, col: 12, offset: 3148},
				run: (*parser).callonHEADERS1,
				expr: &seqExpr{
					pos: position{line: 147, col: 12, offset: 3148},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 147, col: 12, offset: 3148},
							name: "WS_MAND",
						},
						&litMatcher{
							pos:        position{line: 147, col: 20, offset: 3156},
							val:        "headers",
							ignoreCase: false,
							want:       "\"headers\"",
						},
						&ruleRefExpr{
							pos:  position{line: 147, col: 30, offset: 3166},
							name: "WS_MAND",
						},
						&labeledExpr{
							pos:   position{line: 147, col: 38, offset: 3174},
							label: "h",
							expr: &ruleRefExpr{
								pos:  position{line: 147, col: 41, offset: 3177},
								name: "HEADER",
							},
						},
						&labeledExpr{
							pos:   position{line: 147, col: 49, offset: 3185},
							label: "hs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 147, col: 52, offset: 3188},
								expr: &seqExpr{
									pos: position{line: 147, col: 53, offset: 3189},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 147, col: 53, offset: 3189},
											name: "WS",
										},
										&ruleRefExpr{
											pos:  position{line: 147, col: 56, offset: 3192},
											name: "LS",
										},
										&ruleRefExpr{
											pos:  position{line: 147, col: 59, offset: 3195},
											name: "WS",
										},
										&ruleRefExpr{
											pos:  position{line: 147, col: 62, offset: 3198},
											name: "HEADER",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "HEADER",
			pos:  position{line: 151, col: 1, offset: 3238},
			expr: &actionExpr{
				pos: position{line: 151, col: 11, offset: 3248},
				run: (*parser).callonHEADER1,
				expr: &seqExpr{
					pos: position{line: 151, col: 11, offset: 3248},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 151, col: 11, offset: 3248},
							label: "n",
							expr: &ruleRefExpr{
								pos:  position{line: 151, col: 14, offset: 3251},
								name: "IDENT",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 151, col: 21, offset: 3258},
							name: "WS",
						},
						&litMatcher{
							pos:        position{line: 151, col: 24, offset: 3261},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&ruleRefExpr{
							pos:  position{line: 151, col: 28, offset: 3265},
							name: "WS",
						},
						&labeledExpr{
							pos:   position{line: 151, col: 31, offset: 3268},
							label: "v",
							expr: &choiceExpr{
								pos: position{line: 151, col: 34, offset: 3271},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 151, col: 34, offset: 3271},
										name: "VARIABLE",
									},
									&ruleRefExpr{
										pos:  position{line: 151, col: 45, offset: 3282},
										name: "CHAIN",
									},
									&ruleRefExpr{
										pos:  position{line: 151, col: 53, offset: 3290},
										name: "String",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "HIDDEN_RULE",
			pos:  position{line: 155, col: 1, offset: 3327},
			expr: &actionExpr{
				pos: position{line: 155, col: 16, offset: 3342},
				run: (*parser).callonHIDDEN_RULE1,
				expr: &seqExpr{
					pos: position{line: 155, col: 16, offset: 3342},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 155, col: 16, offset: 3342},
							name: "WS_MAND",
						},
						&litMatcher{
							pos:        position{line: 155, col: 24, offset: 3350},
							val:        "hidden",
							ignoreCase: false,
							want:       "\"hidden\"",
						},
					},
				},
			},
		},
		{
			name: "TIMEOUT",
			pos:  position{line: 159, col: 1, offset: 3384},
			expr: &actionExpr{
				pos: position{line: 159, col: 12, offset: 3395},
				run: (*parser).callonTIMEOUT1,
				expr: &seqExpr{
					pos: position{line: 159, col: 12, offset: 3395},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 159, col: 12, offset: 3395},
							name: "WS_MAND",
						},
						&litMatcher{
							pos:        position{line: 159, col: 20, offset: 3403},
							val:        "timeout",
							ignoreCase: false,
							want:       "\"timeout\"",
						},
						&ruleRefExpr{
							pos:  position{line: 159, col: 30, offset: 3413},
							name: "WS_MAND",
						},
						&labeledExpr{
							pos:   position{line: 159, col: 38, offset: 3421},
							label: "t",
							expr: &choiceExpr{
								pos: position{line: 159, col: 41, offset: 3424},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 159, col: 41, offset: 3424},
										name: "VARIABLE",
									},
									&ruleRefExpr{
										pos:  position{line: 159, col: 52, offset: 3435},
										name: "Integer",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MAX_AGE",
			pos:  position{line: 163, col: 1, offset: 3471},
			expr: &actionExpr{
				pos: position{line: 163, col: 12, offset: 3482},
				run: (*parser).callonMAX_AGE1,
				expr: &seqExpr{
					pos: position{line: 163, col: 12, offset: 3482},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 163, col: 12, offset: 3482},
							name: "WS_MAND",
						},
						&litMatcher{
							pos:        position{line: 163, col: 20, offset: 3490},
							val:        "max-age",
							ignoreCase: false,
							want:       "\"max-age\"",
						},
						&ruleRefExpr{
							pos:  position{line: 163, col: 30, offset: 3500},
							name: "WS_MAND",
						},
						&labeledExpr{
							pos:   position{line: 163, col: 38, offset: 3508},
							label: "t",
							expr: &choiceExpr{
								pos: position{line: 163, col: 41, offset: 3511},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 163, col: 41, offset: 3511},
										name: "VARIABLE",
									},
									&ruleRefExpr{
										pos:  position{line: 163, col: 52, offset: 3522},
										name: "Integer",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "S_MAX_AGE",
			pos:  position{line: 167, col: 1, offset: 3557},
			expr: &actionExpr{
				pos: position{line: 167, col: 14, offset: 3570},
				run: (*parser).callonS_MAX_AGE1,
				expr: &seqExpr{
					pos: position{line: 167, col: 14, offset: 3570},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 167, col: 14, offset: 3570},
							name: "WS_MAND",
						},
						&litMatcher{
							pos:        position{line: 167, col: 22, offset: 3578},
							val:        "s-max-age",
							ignoreCase: false,
							want:       "\"s-max-age\"",
						},
						&ruleRefExpr{
							pos:  position{line: 167, col: 34, offset: 3590},
							name: "WS_MAND",
						},
						&labeledExpr{
							pos:   position{line: 167, col: 42, offset: 3598},
							label: "t",
							expr: &choiceExpr{
								pos: position{line: 167, col: 45, offset: 3601},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 167, col: 45, offset: 3601},
										name: "VARIABLE",
									},
									&ruleRefExpr{
										pos:  position{line: 167, col: 56, offset: 3612},
										name: "Integer",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DEPENDS_ON",
			pos:  position{line: 172, col: 1, offset: 3649},
			expr: &actionExpr{
				pos: position{line: 172, col: 15, offset: 3663},
				run: (*parser).callonDEPENDS_ON1,
				expr: &seqExpr{
					pos: position{line: 172, col: 15, offset: 3663},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 172, col: 15, offset: 3663},
							name: "WS_MAND",
						},
						&litMatcher{
							pos:        position{line: 172, col: 23, offset: 3671},
							val:        "depends-on",
							ignoreCase: false,
							want:       "\"depends-on\"",
						},
						&ruleRefExpr{
							pos:  position{line: 172, col: 36, offset: 3684},
							name: "WS_MAND",
						},
						&labeledExpr{
							pos:   position{line: 172, col: 44, offset: 3692},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 172, col: 47, offset: 3695},
								name: "IDENT",
							},
						},
					},
				},
			},
		},
		{
			name: "FLAGS_RULE",
			pos:  position{line: 176, col: 1, offset: 3731},
			expr: &actionExpr{
				pos: position{line: 176, col: 15, offset: 3745},
				run: (*parser).callonFLAGS_RULE1,
				expr: &seqExpr{
					pos: position{line: 176, col: 15, offset: 3745},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 176, col: 15, offset: 3745},
							name: "WS_MAND",
						},
						&labeledExpr{
							pos:   position{line: 176, col: 23, offset: 3753},
							label: "i",
							expr: &ruleRefExpr{
								pos:  position{line: 176, col: 25, offset: 3755},
								name: "IGNORE_FLAG",
							},
						},
						&labeledExpr{
							pos:   position{line: 176, col: 37, offset: 3767},
							label: "is",
							expr: &zeroOrMoreExpr{
								pos: position{line: 176, col: 40, offset: 3770},
								expr: &seqExpr{
									pos: position{line: 176, col: 41, offset: 3771},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 176, col: 41, offset: 3771},
											name: "WS",
										},
										&ruleRefExpr{
											pos:  position{line: 176, col: 44, offset: 3774},
											name: "LS",
										},
										&ruleRefExpr{
											pos:  position{line: 176, col: 47, offset: 3777},
											name: "WS",
										},
										&ruleRefExpr{
											pos:  position{line: 176, col: 50, offset: 3780},
											name: "IGNORE_FLAG",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IGNORE_FLAG",
			pos:  position{line: 180, col: 1, offset: 3823},
			expr: &actionExpr{
				pos: position{line: 180, col: 16, offset: 3838},
				run: (*parser).callonIGNORE_FLAG1,
				expr: &litMatcher{
					pos:        position{line: 180, col: 16, offset: 3838},
					val:        "ignore-errors",
					ignoreCase: false,
					want:       "\"ignore-errors\"",
				},
			},
		},
		{
			name: "CHAIN",
			pos:  position{line: 184, col: 1, offset: 3885},
			expr: &actionExpr{
				pos: position{line: 184, col: 10, offset: 3894},
				run: (*parser).callonCHAIN1,
				expr: &seqExpr{
					pos: position{line: 184, col: 10, offset: 3894},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 184, col: 10, offset: 3894},
							label: "i",
							expr: &ruleRefExpr{
								pos:  position{line: 184, col: 13, offset: 3897},
								name: "CHAINED_ITEM",
							},
						},
						&labeledExpr{
							pos:   position{line: 184, col: 27, offset: 3911},
							label: "ii",
							expr: &zeroOrMoreExpr{
								pos: position{line: 184, col: 30, offset: 3914},
								expr: &seqExpr{
									pos: position{line: 184, col: 31, offset: 3915},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 184, col: 31, offset: 3915},
											expr: &litMatcher{
												pos:        position{line: 184, col: 31, offset: 3915},
												val:        ".",
												ignoreCase: false,
												want:       "\".\"",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 184, col: 36, offset: 3920},
											name: "CHAINED_ITEM",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CHAINED_ITEM",
			pos:  position{line: 188, col: 1, offset: 3964},
			expr: &actionExpr{
				pos: position{line: 188, col: 17, offset: 3980},
				run: (*parser).callonCHAINED_ITEM1,
				expr: &labeledExpr{
					pos:   position{line: 188, col: 17, offset: 3980},
					label: "ci",
					expr: &choiceExpr{
						pos: position{line: 188, col: 21, offset: 3984},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 188, col: 21, offset: 3984},
								name: "PATH_VARIABLE",
							},
							&ruleRefExpr{
								pos:  position{line: 188, col: 37, offset: 4000},
								name: "IDENT",
							},
						},
					},
				},
			},
		},
		{
			name: "PATH_VARIABLE",
			pos:  position{line: 192, col: 1, offset: 4035},
			expr: &actionExpr{
				pos: position{line: 192, col: 18, offset: 4052},
				run: (*parser).callonPATH_VARIABLE1,
				expr: &seqExpr{
					pos: position{line: 192, col: 18, offset: 4052},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 192, col: 18, offset: 4052},
							expr: &litMatcher{
								pos:        position{line: 192, col: 18, offset: 4052},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&litMatcher{
							pos:        position{line: 192, col: 23, offset: 4057},
							val:        "$",
							ignoreCase: false,
							want:       "\"$\"",
						},
						&labeledExpr{
							pos:   position{line: 192, col: 27, offset: 4061},
							label: "i",
							expr: &ruleRefExpr{
								pos:  position{line: 192, col: 30, offset: 4064},
								name: "IDENT",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 192, col: 37, offset: 4071},
							expr: &litMatcher{
								pos:        position{line: 192, col: 37, offset: 4071},
								val:        "]",
								ignoreCase: false,
								want:       "\"]\"",
							},
						},
					},
				},
			},
		},
		{
			name: "VARIABLE",
			pos:  position{line: 196, col: 1, offset: 4113},
			expr: &actionExpr{
				pos: position{line: 196, col: 13, offset: 4125},
				run: (*parser).callonVARIABLE1,
				expr: &seqExpr{
					pos: position{line: 196, col: 13, offset: 4125},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 196, col: 13, offset: 4125},
							val:        "$",
							ignoreCase: false,
							want:       "\"$\"",
						},
						&labeledExpr{
							pos:   position{line: 196, col: 17, offset: 4129},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 196, col: 20, offset: 4132},
								name: "IDENT_WITH_DOT",
							},
						},
					},
				},
			},
		},
		{
			name: "IDENT",
			pos:  position{line: 200, col: 1, offset: 4176},
			expr: &actionExpr{
				pos: position{line: 200, col: 10, offset: 4185},
				run: (*parser).callonIDENT1,
				expr: &oneOrMoreExpr{
					pos: position{line: 200, col: 10, offset: 4185},
					expr: &charClassMatcher{
						pos:        position{line: 200, col: 10, offset: 4185},
						val:        "[A-Za-z0-9:_-]",
						chars:      []rune{':', '_', '-'},
						ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "IDENT_WITHOUT_COLLON",
			pos:  position{line: 204, col: 1, offset: 4232},
			expr: &actionExpr{
				pos: position{line: 204, col: 25, offset: 4256},
				run: (*parser).callonIDENT_WITHOUT_COLLON1,
				expr: &oneOrMoreExpr{
					pos: position{line: 204, col: 25, offset: 4256},
					expr: &charClassMatcher{
						pos:        position{line: 204, col: 25, offset: 4256},
						val:        "[A-Za-z0-9_-]",
						chars:      []rune{'_', '-'},
						ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "IDENT_WITH_DOT",
			pos:  position{line: 208, col: 1, offset: 4302},
			expr: &actionExpr{
				pos: position{line: 208, col: 19, offset: 4320},
				run: (*parser).callonIDENT_WITH_DOT1,
				expr: &oneOrMoreExpr{
					pos: position{line: 208, col: 19, offset: 4320},
					expr: &charClassMatcher{
						pos:        position{line: 208, col: 19, offset: 4320},
						val:        "[a-zA-Z0-9-:_.]",
						chars:      []rune{'-', ':', '_', '.'},
						ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Null",
			pos:  position{line: 212, col: 1, offset: 4368},
			expr: &actionExpr{
				pos: position{line: 212, col: 9, offset: 4376},
				run: (*parser).callonNull1,
				expr: &litMatcher{
					pos:        position{line: 212, col: 9, offset: 4376},
					val:        "null",
					ignoreCase: false,
					want:       "\"null\"",
				},
			},
		},
		{
			name: "Boolean",
			pos:  position{line: 216, col: 1, offset: 4406},
			expr: &actionExpr{
				pos: position{line: 216, col: 12, offset: 4417},
				run: (*parser).callonBoolean1,
				expr: &choiceExpr{
					pos: position{line: 216, col: 13, offset: 4418},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 216, col: 13, offset: 4418},
							val:        "true",
							ignoreCase: false,
							want:       "\"true\"",
						},
						&litMatcher{
							pos:        position{line: 216, col: 22, offset: 4427},
							val:        "false",
							ignoreCase: false,
							want:       "\"false\"",
						},
					},
				},
			},
		},
		{
			name: "String",
			pos:  position{line: 220, col: 1, offset: 4468},
			expr: &actionExpr{
				pos: position{line: 220, col: 11, offset: 4478},
				run: (*parser).callonString1,
				expr: &seqExpr{
					pos: position{line: 220, col: 11, offset: 4478},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 220, col: 11, offset: 4478},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 220, col: 15, offset: 4482},
							expr: &seqExpr{
								pos: position{line: 220, col: 17, offset: 4484},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 220, col: 17, offset: 4484},
										expr: &litMatcher{
											pos:        position{line: 220, col: 18, offset: 4485},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
									},
									&anyMatcher{
										line: 220, col: 22, offset: 4489,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 220, col: 27, offset: 4494},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "Float",
			pos:  position{line: 224, col: 1, offset: 4529},
			expr: &actionExpr{
				pos: position{line: 224, col: 10, offset: 4538},
				run: (*parser).callonFloat1,
				expr: &seqExpr{
					pos: position{line: 224, col: 10, offset: 4538},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 224, col: 10, offset: 4538},
							expr: &choiceExpr{
								pos: position{line: 224, col: 11, offset: 4539},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 224, col: 11, offset: 4539},
										val:        "+",
										ignoreCase: false,
										want:       "\"+\"",
									},
									&litMatcher{
										pos:        position{line: 224, col: 17, offset: 4545},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 224, col: 23, offset: 4551},
							name: "Natural",
						},
						&litMatcher{
							pos:        position{line: 224, col: 31, offset: 4559},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&ruleRefExpr{
							pos:  position{line: 224, col: 35, offset: 4563},
							name: "Natural",
						},
					},
				},
			},
		},
		{
			name: "Integer",
			pos:  position{line: 228, col: 1, offset: 4601},
			expr: &actionExpr{
				pos: position{line: 228, col: 12, offset: 4612},
				run: (*parser).callonInteger1,
				expr: &seqExpr{
					pos: position{line: 228, col: 12, offset: 4612},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 228, col: 12, offset: 4612},
							expr: &choiceExpr{
								pos: position{line: 228, col: 13, offset: 4613},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 228, col: 13, offset: 4613},
										val:        "+",
										ignoreCase: false,
										want:       "\"+\"",
									},
									&litMatcher{
										pos:        position{line: 228, col: 19, offset: 4619},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 228, col: 25, offset: 4625},
							name: "Natural",
						},
					},
				},
			},
		},
		{
			name: "Natural",
			pos:  position{line: 232, col: 1, offset: 4665},
			expr: &choiceExpr{
				pos: position{line: 232, col: 11, offset: 4677},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 232, col: 11, offset: 4677},
						val:        "0",
						ignoreCase: false,
						want:       "\"0\"",
					},
					&seqExpr{
						pos: position{line: 232, col: 17, offset: 4683},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 232, col: 17, offset: 4683},
								name: "NonZeroDecimalDigit",
							},
							&zeroOrMoreExpr{
								pos: position{line: 232, col: 37, offset: 4703},
								expr: &ruleRefExpr{
									pos:  position{line: 232, col: 37, offset: 4703},
									name: "DecimalDigit",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DecimalDigit",
			pos:  position{line: 234, col: 1, offset: 4718},
			expr: &charClassMatcher{
				pos:        position{line: 234, col: 16, offset: 4735},
				val:        "[0-9]",
				ranges:     []rune{'0', '9'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "NonZeroDecimalDigit",
			pos:  position{line: 235, col: 1, offset: 4741},
			expr: &charClassMatcher{
				pos:        position{line: 235, col: 23, offset: 4765},
				val:        "[1-9]",
				ranges:     []rune{'1', '9'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "SPACE",
			pos:  position{line: 237, col: 1, offset: 4772},
			expr: &charClassMatcher{
				pos:        position{line: 237, col: 10, offset: 4781},
				val:        "[ \\t]",
				chars:      []rune{' ', '\t'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "WS_MAND",
			displayName: "\"mandatory-whitespace\"",
			pos:         position{line: 238, col: 1, offset: 4787},
			expr: &oneOrMoreExpr{
				pos: position{line: 238, col: 35, offset: 4821},
				expr: &choiceExpr{
					pos: position{line: 238, col: 36, offset: 4822},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 238, col: 36, offset: 4822},
							name: "SPACE",
						},
						&ruleRefExpr{
							pos:  position{line: 238, col: 44, offset: 4830},
							name: "COMMENT",
						},
						&ruleRefExpr{
							pos:  position{line: 238, col: 54, offset: 4840},
							name: "NL",
						},
					},
				},
			},
		},
		{
			name:        "WS",
			displayName: "\"whitespace\"",
			pos:         position{line: 239, col: 1, offset: 4845},
			expr: &zeroOrMoreExpr{
				pos: position{line: 239, col: 20, offset: 4864},
				expr: &choiceExpr{
					pos: position{line: 239, col: 21, offset: 4865},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 239, col: 21, offset: 4865},
							name: "SPACE",
						},
						&ruleRefExpr{
							pos:  position{line: 239, col: 29, offset: 4873},
							name: "COMMENT",
						},
					},
				},
			},
		},
		{
			name:        "LS",
			displayName: "\"line-separator\"",
			pos:         position{line: 240, col: 1, offset: 4883},
			expr: &choiceExpr{
				pos: position{line: 240, col: 25, offset: 4907},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 240, col: 25, offset: 4907},
						name: "NL",
					},
					&litMatcher{
						pos:        position{line: 240, col: 30, offset: 4912},
						val:        ",",
						ignoreCase: false,
						want:       "\",\"",
					},
					&ruleRefExpr{
						pos:  position{line: 240, col: 36, offset: 4918},
						name: "COMMENT",
					},
				},
			},
		},
		{
			name:        "BS",
			displayName: "\"block-separator\"",
			pos:         position{line: 241, col: 1, offset: 4927},
			expr: &oneOrMoreExpr{
				pos: position{line: 241, col: 25, offset: 4951},
				expr: &seqExpr{
					pos: position{line: 241, col: 26, offset: 4952},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 241, col: 26, offset: 4952},
							name: "WS",
						},
						&choiceExpr{
							pos: position{line: 241, col: 30, offset: 4956},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 241, col: 30, offset: 4956},
									name: "NL",
								},
								&ruleRefExpr{
									pos:  position{line: 241, col: 35, offset: 4961},
									name: "COMMENT",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 241, col: 44, offset: 4970},
							name: "WS",
						},
					},
				},
			},
		},
		{
			name:        "NL",
			displayName: "\"new-line\"",
			pos:         position{line: 242, col: 1, offset: 4975},
			expr: &litMatcher{
				pos:        position{line: 242, col: 18, offset: 4992},
				val:        "\n",
				ignoreCase: false,
				want:       "\"\\n\"",
			},
		},
		{
			name: "COMMENT",
			pos:  position{line: 244, col: 1, offset: 4998},
			expr: &seqExpr{
				pos: position{line: 244, col: 12, offset: 5009},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 244, col: 12, offset: 5009},
						val:        "//",
						ignoreCase: false,
						want:       "\"//\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 244, col: 17, offset: 5014},
						expr: &seqExpr{
							pos: position{line: 244, col: 19, offset: 5016},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 244, col: 19, offset: 5016},
									expr: &litMatcher{
										pos:        position{line: 244, col: 20, offset: 5017},
										val:        "\n",
										ignoreCase: false,
										want:       "\"\\n\"",
									},
								},
								&anyMatcher{
									line: 244, col: 25, offset: 5022,
								},
							},
						},
					},
					&choiceExpr{
						pos: position{line: 244, col: 31, offset: 5028},
						alternatives: []interface{}{
							&litMatcher{
								pos:        position{line: 244, col: 31, offset: 5028},
								val:        "\n",
								ignoreCase: false,
								want:       "\"\\n\"",
							},
							&ruleRefExpr{
								pos:  position{line: 244, col: 38, offset: 5035},
								name: "EOF",
							},
						},
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 246, col: 1, offset: 5041},
			expr: &notExpr{
				pos: position{line: 246, col: 8, offset: 5048},
				expr: &anyMatcher{
					line: 246, col: 9, offset: 5049,
				},
			},
		},
	},
}

func (c *current) onQUERY1(us, firstBlock, otherBlocks interface{}) (interface{}, error) {
	return newQuery(us, firstBlock, otherBlocks)
}

func (p *parser) callonQUERY1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQUERY1(stack["us"], stack["firstBlock"], stack["otherBlocks"])
}

func (c *current) onUSE1(r, v interface{}) (interface{}, error) {
	return newUse(r, v)
}

func (p *parser) callonUSE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUSE1(stack["r"], stack["v"])
}

func (c *current) onUSE_ACTION1() (interface{}, error) {
	return stringify(c.text)
}

func (p *parser) callonUSE_ACTION1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUSE_ACTION1()
}

func (c *current) onUSE_VALUE1(v interface{}) (interface{}, error) {
	return newUseValue(v)
}

func (p *parser) callonUSE_VALUE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUSE_VALUE1(stack["v"])
}

func (c *current) onBLOCK1(action, m, w, f, fl interface{}) (interface{}, error) {
	return newBlock(action, m, w, f, fl)
}

func (p *parser) callonBLOCK1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBLOCK1(stack["action"], stack["m"], stack["w"], stack["f"], stack["fl"])
}

func (c *current) onACTION_RULE1(m, r, a, i interface{}) (interface{}, error) {
	return newActionRule(m, r, a, i)
}

func (p *parser) callonACTION_RULE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onACTION_RULE1(stack["m"], stack["r"], stack["a"], stack["i"])
}

func (c *current) onMETHOD1() (interface{}, error) {
	return stringify(c.text)
}

func (p *parser) callonMETHOD1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMETHOD1()
}

func (c *current) onALIAS1(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonALIAS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onALIAS1(stack["a"])
}

func (c *current) onIN1(t interface{}) (interface{}, error) {
	return newIn(t)
}

func (p *parser) callonIN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIN1(stack["t"])
}

func (c *current) onMODIFIER_RULE1(m interface{}) (interface{}, error) {
	return m, nil
}

func (p *parser) callonMODIFIER_RULE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMODIFIER_RULE1(stack["m"])
}

func (c *current) onWITH_RULE1(pb, kvs interface{}) (interface{}, error) {
	return newWith(pb, kvs)
}

func (p *parser) callonWITH_RULE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWITH_RULE1(stack["pb"], stack["kvs"])
}

func (c *current) onPARAMETER_BODY1(t, fn interface{}) (interface{}, error) {
	return newParameterBody(t, fn)
}

func (p *parser) callonPARAMETER_BODY1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPARAMETER_BODY1(stack["t"], stack["fn"])
}

func (c *current) onKEY_VALUE_LIST1(first, others interface{}) (interface{}, error) {
	return newKeyValueList(first, others)
}

func (p *parser) callonKEY_VALUE_LIST1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKEY_VALUE_LIST1(stack["first"], stack["others"])
}

func (c *current) onKEY_VALUE1(k, v, fn interface{}) (interface{}, error) {
	return newKeyValue(k, v, fn)
}

func (p *parser) callonKEY_VALUE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKEY_VALUE1(stack["k"], stack["v"], stack["fn"])
}

func (c *current) onAPPLY_FN1(fn interface{}) (interface{}, error) {
	return fn, nil
}

func (p *parser) callonAPPLY_FN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAPPLY_FN1(stack["fn"])
}

func (c *current) onFUNCTION1() (interface{}, error) {
	return stringify(c.text)
}

func (p *parser) callonFUNCTION1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFUNCTION1()
}

func (c *current) onVALUE1(v interface{}) (interface{}, error) {
	return newValue(v)
}

func (p *parser) callonVALUE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVALUE1(stack["v"])
}

func (c *current) onLIST1(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonLIST1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLIST1(stack["l"])
}

func (c *current) onEMPTY_LIST1() (interface{}, error) {
	return newEmptyList()
}

func (p *parser) callonEMPTY_LIST1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEMPTY_LIST1()
}

func (c *current) onPOPULATED_LIST1(i, ii interface{}) (interface{}, error) {
	return newList(i, ii)
}

func (p *parser) callonPOPULATED_LIST1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPOPULATED_LIST1(stack["i"], stack["ii"])
}

func (c *current) onOBJECT1(o interface{}) (interface{}, error) {
	return o, nil
}

func (p *parser) callonOBJECT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOBJECT1(stack["o"])
}

func (c *current) onEMPTY_OBJ1() (interface{}, error) {
	return newEmptyObject()
}

func (p *parser) callonEMPTY_OBJ1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEMPTY_OBJ1()
}

func (c *current) onPOPULATED_OBJ1(oe, oes interface{}) (interface{}, error) {
	return newPopulatedObject(oe, oes)
}

func (p *parser) callonPOPULATED_OBJ1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPOPULATED_OBJ1(stack["oe"], stack["oes"])
}

func (c *current) onOBJ_ENTRY1(k, v interface{}) (interface{}, error) {
	return newObjectEntry(k, v)
}

func (p *parser) callonOBJ_ENTRY1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOBJ_ENTRY1(stack["k"], stack["v"])
}

func (c *current) onPRIMITIVE1(p interface{}) (interface{}, error) {
	return newPrimitive(p)
}

func (p *parser) callonPRIMITIVE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPRIMITIVE1(stack["p"])
}

func (c *current) onONLY_RULE1(f, fs interface{}) (interface{}, error) {
	return newOnly(f, fs)
}

func (p *parser) callonONLY_RULE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onONLY_RULE1(stack["f"], stack["fs"])
}

func (c *current) onFILTER1(f, fns interface{}) (interface{}, error) {
	return newFilter(f, fns)
}

func (p *parser) callonFILTER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFILTER1(stack["f"], stack["fns"])
}

func (c *current) onFILTER_VALUE1(fv interface{}) (interface{}, error) {
	return newFilterValue(fv)
}

func (p *parser) callonFILTER_VALUE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFILTER_VALUE1(stack["fv"])
}

func (c *current) onAPPLY_FILTER_FN1(fn interface{}) (interface{}, error) {
	return fn, nil
}

func (p *parser) callonAPPLY_FILTER_FN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAPPLY_FILTER_FN1(stack["fn"])
}

func (c *current) onFILTER_FUNCTION1(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonFILTER_FUNCTION1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFILTER_FUNCTION1(stack["f"])
}

func (c *current) onMATCHES1(arg interface{}) (interface{}, error) {
	return newMatchFilter(arg)
}

func (p *parser) callonMATCHES1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMATCHES1(stack["arg"])
}

func (c *current) onFILTER_BY_REGEX1(path, regex interface{}) (interface{}, error) {
	return newFilterByRegex(path, regex)
}

func (p *parser) callonFILTER_BY_REGEX1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFILTER_BY_REGEX1(stack["path"], stack["regex"])
}

func (c *current) onHEADERS1(h, hs interface{}) (interface{}, error) {
	return newHeaders(h, hs)
}

func (p *parser) callonHEADERS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHEADERS1(stack["h"], stack["hs"])
}

func (c *current) onHEADER1(n, v interface{}) (interface{}, error) {
	return newHeader(n, v)
}

func (p *parser) callonHEADER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHEADER1(stack["n"], stack["v"])
}

func (c *current) onHIDDEN_RULE1() (interface{}, error) {
	return newHidden()
}

func (p *parser) callonHIDDEN_RULE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHIDDEN_RULE1()
}

func (c *current) onTIMEOUT1(t interface{}) (interface{}, error) {
	return newTimeout(t)
}

func (p *parser) callonTIMEOUT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTIMEOUT1(stack["t"])
}

func (c *current) onMAX_AGE1(t interface{}) (interface{}, error) {
	return newMaxAge(t)
}

func (p *parser) callonMAX_AGE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMAX_AGE1(stack["t"])
}

func (c *current) onS_MAX_AGE1(t interface{}) (interface{}, error) {
	return newSmaxAge(t)
}

func (p *parser) callonS_MAX_AGE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onS_MAX_AGE1(stack["t"])
}

func (c *current) onDEPENDS_ON1(t interface{}) (interface{}, error) {
	return newDependsOn(t)
}

func (p *parser) callonDEPENDS_ON1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDEPENDS_ON1(stack["t"])
}

func (c *current) onFLAGS_RULE1(i, is interface{}) (interface{}, error) {
	return newFlags(i, is)
}

func (p *parser) callonFLAGS_RULE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFLAGS_RULE1(stack["i"], stack["is"])
}

func (c *current) onIGNORE_FLAG1() (interface{}, error) {
	return newIgnoreErrors()
}

func (p *parser) callonIGNORE_FLAG1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIGNORE_FLAG1()
}

func (c *current) onCHAIN1(i, ii interface{}) (interface{}, error) {
	return newChain(i, ii)
}

func (p *parser) callonCHAIN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCHAIN1(stack["i"], stack["ii"])
}

func (c *current) onCHAINED_ITEM1(ci interface{}) (interface{}, error) {
	return newChained(ci)
}

func (p *parser) callonCHAINED_ITEM1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCHAINED_ITEM1(stack["ci"])
}

func (c *current) onPATH_VARIABLE1(i interface{}) (interface{}, error) {
	return newChainPathVariable(i)
}

func (p *parser) callonPATH_VARIABLE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPATH_VARIABLE1(stack["i"])
}

func (c *current) onVARIABLE1(v interface{}) (interface{}, error) {
	return newVariable(v)
}

func (p *parser) callonVARIABLE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVARIABLE1(stack["v"])
}

func (c *current) onIDENT1() (interface{}, error) {
	return stringify(c.text)
}

func (p *parser) callonIDENT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIDENT1()
}

func (c *current) onIDENT_WITHOUT_COLLON1() (interface{}, error) {
	return stringify(c.text)
}

func (p *parser) callonIDENT_WITHOUT_COLLON1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIDENT_WITHOUT_COLLON1()
}

func (c *current) onIDENT_WITH_DOT1() (interface{}, error) {
	return stringify(c.text)
}

func (p *parser) callonIDENT_WITH_DOT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIDENT_WITH_DOT1()
}

func (c *current) onNull1() (interface{}, error) {
	return newNull()
}

func (p *parser) callonNull1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNull1()
}

func (c *current) onBoolean1() (interface{}, error) {
	return newBoolean(c.text)
}

func (p *parser) callonBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolean1()
}

func (c *current) onString1() (interface{}, error) {
	return newString(c.text)
}

func (p *parser) callonString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onString1()
}

func (c *current) onFloat1() (interface{}, error) {
	return newFloat(c.text)
}

func (p *parser) callonFloat1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloat1()
}

func (c *current) onInteger1() (interface{}, error) {
	return newInteger(c.text)
}

func (p *parser) callonInteger1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInteger1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

var statePool = &sync.Pool{
	New: func() interface{} { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
