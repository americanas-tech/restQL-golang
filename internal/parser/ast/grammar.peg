{
package ast

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"strings"
	"unicode"
	"unicode/utf8"
)
}

QUERY <- (NL / SPACE / COMMENT)* us:(USE)* WS (NL / COMMENT)* WS firstBlock:BLOCK otherBlocks:(BS BLOCK)* (NL / SPACE / COMMENT)* EOF {
	return newQuery(us, firstBlock, otherBlocks)
}

USE <- "use" WS_MAND r:(USE_ACTION) WS v:(USE_VALUE) WS LS* WS {
	return newUse(r, v)
}

USE_ACTION <- ("timeout" / "max-age" / "s-max-age") {
	return stringify(c.text)
}

USE_VALUE <- v:(String / Integer) {
	return newUseValue(v)
}

BLOCK <- action:(ACTION_RULE) m:(MODIFIER_RULE?) w:(WITH_RULE?) f:(HIDDEN_RULE / ONLY_RULE)? fl:(FLAGS_RULE?) WS {
	return newBlock(action, m, w, f, fl)
}

ACTION_RULE <- m:(METHOD) WS_MAND r:(IDENT) a:(ALIAS?) i:(IN?) {
	return newActionRule(m, r, a, i)
}

METHOD <- ("from" / "to" / "into"/ "update" / "delete") {
	return stringify(c.text)
}

ALIAS <- WS_MAND "as" WS_MAND a:(IDENT) {
	return a, nil
}

IN <- WS_MAND "in" WS_MAND t:(IDENT_WITH_DOT) {
	return newIn(t)
}

MODIFIER_RULE <- m:(HEADERS / TIMEOUT / MAX_AGE / S_MAX_AGE)+ {
	return m, nil
}

WITH_RULE <- WS_MAND "with" WS_MAND pb:PARAMETER_BODY? kvs:KEY_VALUE_LIST? {
	return newWith(pb, kvs)
}

PARAMETER_BODY <- '$' t:(IDENT) fn:(APPLY_FN)* WS LS? WS {
	return newParameterBody(t, fn)
}

KEY_VALUE_LIST <- first:KEY_VALUE others:(WS (LS (WS NL WS)* / LS) WS KEY_VALUE)* {
	return newKeyValueList(first, others)
}

KEY_VALUE <- k:(IDENT_WITH_DOT) WS '=' WS v:(VALUE) fn:(APPLY_FN)* {
	return newKeyValue(k, v, fn)
}

APPLY_FN <- WS "->" WS? fn:(FUNCTION) {
	return fn, nil
}

FUNCTION <- ("no-multiplex" / "base64" / "json"/ "as-body" / "flatten") {
	return stringify(c.text)
}

VALUE <- v:(LIST / OBJECT / VARIABLE / PRIMITIVE) {
	return newValue(v)
}

LIST <- l:(EMPTY_LIST / POPULATED_LIST) {
	return l, nil
}

EMPTY_LIST <- '[' WS ']' {
	return newEmptyList()
}

POPULATED_LIST <- '[' WS i:VALUE ii:(WS LS* WS VALUE)* WS ']' {
	return newList(i, ii)
}

OBJECT <- o:(EMPTY_OBJ / POPULATED_OBJ) {
	return o, nil
}

EMPTY_OBJ <- '{' WS NL* WS '}' {
	return newEmptyObject()
}

POPULATED_OBJ <- '{' WS NL* WS oe:(OBJ_ENTRY) oes:(WS ',' WS NL* WS OBJ_ENTRY)* WS NL* WS '}' {
	return newPopulatedObject(oe, oes)
}

OBJ_ENTRY <- k:(String / IDENT_WITHOUT_COLLON) WS ':' WS v:(VALUE) {
	return newObjectEntry(k, v)
}

PRIMITIVE <- p:(Null / Boolean / String / Float / Integer / CHAIN) {
	return newPrimitive(p)
}



ONLY_RULE <- WS_MAND "only" WS_MAND f:(FILTER) fs:(WS !(FLAGS_RULE / BS BLOCK) (LS (WS NL WS)* / LS) WS FILTER)* {
	return newOnly(f, fs)
}

FILTER <- f:(FILTER_VALUE) fn:(MATCHES_FN?) {
	return newFilter(f, fn)
}

FILTER_VALUE <- fv:(IDENT_WITH_DOT / '*') {
	return newFilterValue(fv)
}

MATCHES_FN <- WS "->" WS "matches" "(" arg:(VARIABLE / String) ")" {
	return arg, nil
}

HEADERS <- WS_MAND "headers" WS_MAND h:(HEADER) hs:(WS LS WS HEADER)* {
	return newHeaders(h, hs)
}

HEADER <- n:(IDENT) WS '=' WS v:(VARIABLE / CHAIN / String) {
	return newHeader(n, v)
}

HIDDEN_RULE <- WS_MAND "hidden" {
	return newHidden()
}

TIMEOUT <- WS_MAND "timeout" WS_MAND t:(VARIABLE / Integer) {
	return newTimeout(t)
}

MAX_AGE <- WS_MAND "max-age" WS_MAND t:(VARIABLE / Integer) {
	return newMaxAge(t)
}

S_MAX_AGE <- WS_MAND "s-max-age" WS_MAND t:(VARIABLE / Integer) {
	return newSmaxAge(t)
}

FLAGS_RULE <- WS_MAND i:IGNORE_FLAG is:(WS LS WS IGNORE_FLAG)* {
	return newFlags(i, is)
}

IGNORE_FLAG <- "ignore-errors" {
	return newIgnoreErrors()
}

CHAIN <- i:(CHAINED_ITEM) ii:('.'? CHAINED_ITEM)* {
	return newChain(i, ii)
}

CHAINED_ITEM <- ci:(PATH_VARIABLE / IDENT) {
	return newChained(ci)
}

PATH_VARIABLE <- '['? '$' i:(IDENT) ']'? {
	return newChainPathVariable(i)
}

VARIABLE <- '$' v:(IDENT_WITH_DOT) {
	return newVariable(v)
}

IDENT <- [A-Za-z0-9:_-]+ {
	return stringify(c.text)
}

IDENT_WITHOUT_COLLON <- [A-Za-z0-9_-]+ {
	return stringify(c.text)
}

IDENT_WITH_DOT <- [a-zA-Z0-9-:_.]+ {
	return stringify(c.text)
}

Null <- "null" {
	return newNull()
}

Boolean <- ("true" / "false") {
	return newBoolean(c.text)
}

String <- '"' ( !'"' . )* '"' {
	return newString(c.text)
}

Float <- ('+' / '-')? Natural '.' Natural {
	return newFloat(c.text)
}

Integer <- ('+' / '-')? Natural {
	return newInteger(c.text)
}

Natural ← '0' / NonZeroDecimalDigit DecimalDigit*

DecimalDigit ← [0-9]
NonZeroDecimalDigit ← [1-9]

SPACE <- [ \t]
WS_MAND "mandatory-whitespace" <- (SPACE / COMMENT / NL)+
WS "whitespace" <- (SPACE / COMMENT)*
LS "line-separator" <- (NL / ',' / COMMENT)
BS "block-separator" <- (WS (NL / COMMENT) WS)+
NL "new-line" <- '\n'

COMMENT <- "//" ( !'\n' . )* ('\n' / EOF)

EOF <- !.
